syntax = "proto3";

package rivetq;

option go_package = "github.com/rivetq/rivetq/api/gen;rivetq";

// QueueService manages job queues
service QueueService {
  // Enqueue adds a job to a queue
  rpc Enqueue(EnqueueRequest) returns (EnqueueResponse);
  
  // Lease leases jobs from a queue
  rpc Lease(LeaseRequest) returns (LeaseResponse);
  
  // Ack acknowledges job completion
  rpc Ack(AckRequest) returns (AckResponse);
  
  // Nack negatively acknowledges a job
  rpc Nack(NackRequest) returns (NackResponse);
  
  // Stats returns queue statistics
  rpc Stats(StatsRequest) returns (StatsResponse);
  
  // ListQueues returns all queues
  rpc ListQueues(ListQueuesRequest) returns (ListQueuesResponse);
  
  // SetRateLimit sets rate limit for a queue
  rpc SetRateLimit(SetRateLimitRequest) returns (SetRateLimitResponse);
  
  // GetRateLimit gets rate limit for a queue
  rpc GetRateLimit(GetRateLimitRequest) returns (GetRateLimitResponse);
}

message EnqueueRequest {
  string queue_name = 1;
  bytes payload = 2;
  map<string, string> headers = 3;
  uint32 priority = 4; // 0-9
  int64 delay_ms = 5;
  RetryPolicy retry_policy = 6;
  string idempotency_key = 7;
}

message EnqueueResponse {
  string job_id = 1;
}

message RetryPolicy {
  uint32 max_retries = 1;
}

message LeaseRequest {
  string queue_name = 1;
  int32 max_jobs = 2;
  int64 visibility_ms = 3;
}

message LeaseResponse {
  repeated Job jobs = 1;
}

message Job {
  string id = 1;
  string queue = 2;
  bytes payload = 3;
  map<string, string> headers = 4;
  uint32 priority = 5;
  uint32 tries = 6;
  string lease_id = 7;
}

message AckRequest {
  string job_id = 1;
  string lease_id = 2;
}

message AckResponse {
  bool success = 1;
}

message NackRequest {
  string job_id = 1;
  string lease_id = 2;
  string reason = 3;
}

message NackResponse {
  bool success = 1;
}

message StatsRequest {
  string queue_name = 1;
}

message StatsResponse {
  int32 ready = 1;
  int32 inflight = 2;
  int32 dlq = 3;
}

message ListQueuesRequest {}

message ListQueuesResponse {
  repeated string queues = 1;
}

message SetRateLimitRequest {
  string queue_name = 1;
  double capacity = 2;
  double refill_rate = 3;
}

message SetRateLimitResponse {
  bool success = 1;
}

message GetRateLimitRequest {
  string queue_name = 1;
}

message GetRateLimitResponse {
  double capacity = 1;
  double refill_rate = 2;
  bool exists = 3;
}
